public class ShotInfo {
    private int xCoordinate = 0;
    private int yCoordinate = 0;
    public Shot(int x, int y) {
        this.xCoordinate = x;
        this.yCoordinate = y;
    }
    public int getXCoordinate() {
        return xCoordinate;
    }
    public void setXCoordinate(int xCoordinate) {
        this.xCoordinate = xCoordinate;
    }
    public int getYCoordinate() {
        return yCoordinate;
    }
    public void setYCoordinate(int yCoordinate) {
        this.yCoordinate = yCoordinate;
    }
}
public class SpaceshipEngine extends JPanel implements KeyListener, ActionListener {
    public static final String SPACESHIP_IMAGE_PATH = "uzaygemisi.png";
    public static final int BALL_SIDE_LENGTH = 20;
    public static final int PASSING_UNIT_TIME = 5;
    var timer = new Timer(5, this);
    private int passing_time = 0;
    private int shot_count = 0;
    private BufferedImage spaceship_image;
    private ArrayList<Shot> shot_number = new ArrayList<Shot>();
    private int shot_yCoordinate = 1;
    private int ball_xCoordinate = 1;
    private int ball_movement_step = 5;
    private int spaceship_xCoordinate = 0;
    private int spaceship_movement_step = 20;
    public SpaceshipEngine() {
        spaceship_image = getSpaceshipImage();
        setBackground(Color.BLACK);
        timer.start();
    }
    public boolean checkShotIntersectionWithBall() {
        var ballArea = new Rectangle(ball_xCoordinate, 0, BALL_SIDE_LENGTH, BALL_SIDE_LENGTH);
        for (Shot shot : shot_number) {
            var shotArea = new Rectangle(shot.getX(), shot.getY(), BALL_SIDE_LENGTH, BALL_SIDE_LENGTH);
            if (shotArea.intersects(ballArea)) {
                return true;
            }
        }
        return false;
    }
    public void paint(Graphics g) {
        passing_time += PASSING_UNIT_TIME;
        super.paint(g); //To change body of generated methods, choose Tools | Templates.
        g.setColor(Color.red);
        g.fillOval(ball_xCoordinate, 0, 20, 20);
        g.drawImage(spaceship_image, spaceship_xCoordinate, 490, spaceship_image.getWidth() / 10, spaceship_image.getHeight() / 10, this);
        for (Shot shot : shot_number) {
            if (shot.getY() < 0) {
                shot_number.remove(shot);
            }
        }
        g.setColor(Color.YELLOW);
        for (Shot shot : shot_number) {
            g.fillRect(shot.getX(), shot.getY(), 15, 15);
        }
        if (checkShotIntersectionWithBall()) {
            timer.stop();
            String message = "YOU WİN\n"
                    + " PASSİNG TİME = " + passing_time / 1000.0
                    + "\n USİNG SHOTS = " + shot_count;
            JOptionPane.showMessageDialog(this, message);
            System.exit(0);
        }
    }
    public void repaint() {
        super.repaint(); //To change body of generated methods, choose Tools | Templates.
    }
    public void keyTyped(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void keyPressed(KeyEvent e) {
        int a = e.getKeyCode();
        if (a == KeyEvent.VK_LEFT) {
            if (spaceship_xCoordinate <= 0) {
                spaceship_xCoordinate = 0;
            } else {
                spaceship_xCoordinate -= spaceship_movement_step;
            }
        }
        if (a == KeyEvent.VK_RIGHT) {
            if (spaceship_xCoordinate >= 740) {
                spaceship_xCoordinate = 740;
            } else {
                spaceship_xCoordinate += spaceship_movement_step;
            }
        } else if (a == KeyEvent.VK_CONTROL) {
            shot_number.add(new Shot(spaceship_xCoordinate + 15, 485));
            shot_count++;
        }
    }
    public void keyReleased(KeyEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void actionPerformed(ActionEvent e) {
        ball_xCoordinate += ball_movement_step;
        if (ball_xCoordinate >= 770) {
            ball_movement_step = -ball_movement_step;
        } else if (ball_xCoordinate <= 0) {
            ball_movement_step = -ball_movement_step;
        }
        for (Shot shot : shot_number) {
            shot.setY(shot.getY() - shot_yCoordinate);
        }
        repaint();
    }
    private BufferedImage getSpaceshipImage() {
        try {
            var spaceshipImage = new File(SPACESHIP_IMAGE_PATH);
            var imageInputStream = new FileImageInputStream(spaceshipImage);
            return ImageIO.read(imageInputStream);
        } catch (IOException ex) {
            Logger.getLogger(SpaceshipEngine.class.getName()).log(Level.SEVERE, "Spaceship image'i okunurken hata alindi", ex);
        }
    }
}
